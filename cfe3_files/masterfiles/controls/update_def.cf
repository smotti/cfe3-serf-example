bundle common update_def
{
  classes:

    !feature_def_json_preparse::
      "have_augments_file"
        expression => fileexists($(augments_file)),
        scope      => "bundle";
      "have_augments_classes"
        expression => isvariable("augments[classes]"),
        scope      => "bundle";

    have_augments_classes.!feature_def_json_preparse::
      "$(augments_classes_data_keys)"
        expression => classmatch("$(augments[classes][$(augments_classes_data_keys)])"),
        meta       => { "augments_class", "derived_from=$(augments_file)" };

    any::

      "daily_inputs_sync_with_purge"
        scope      => "namespace",
        expression => splayclass("${sys.host}", "daily");

      # Update masterfiles from remote repository    
      "cfengine_internal_masterfiles_update" expression => "any";

  vars:

    !feature_def_json_preparse::
      "augments_file" string => "$(this.promise_dirname)/../../def.json";

      "defvars" slist => variablesmatching("default:update_def\..*", "defvar");

    have_augments_file.!feature_def_json_preparse::
      "augments" data => readjson($(augments_file), 100k), ifvarclass => "have_augments_file";

      "override_vars" slist => getindices("augments[vars]");
      "override_data_$(override_vars)" data => mergedata("augments[vars][$(override_vars)]");
      "override_data_s_$(override_vars)" string => format("%S", "override_data_$(override_vars)");

    have_augments_classes.!feature_def_json_preparse::
      "augments_classes_data" data => mergedata("augments[classes]");
      "augments_classes_data_keys" slist => getindices("augments_classes_data");

    policy_server|am_policy_hub::
      "modules"
        comment => "Modules required for a minimum working system",
        slist   => { "cf-manifest" };

    any::
      # the permissions for your masterfiles, which will propagate to inputs
      "masterfiles_perms_mode"
        string => "0600",
        handle => "common_def_vars_masterfiles_perms_mode",
        meta   => { "defvar" };

      "policy_servers" slist => { "127.0.0.1" };
      "masterfiles_update_script"
        comment => "Script to use to pull masterfiles from remote repository",
        string  => "${sys.inputdir}/tools/update_masterfiles.sh";
      "modules_path"
        comment => "Where to find modules on the policy server",
        string  => "${sys.workdir}/modules";
      "inputs_manifest"
        comment => "Manifest file to determine what inputs to download",
        string  => "manifest.txt";
      "cfengine_procs"
        comment => "CFEngine processes to start or restart",
        slist   => { "cf-serverd", "cf-execd", "cf-monitord" };
      "cfengine_service"
        comment => "Name of the systems cfengine service",
        string  => "cfengine3";

  reports:

    DEBUG|DEBUG_update_def::
      "DEBUG: $(this.bundle)";
      "$(const.t) override request $(override_vars) to '$(override_data_s_$(override_vars))'; new value '$($(override_vars))'"
        ifvarclass => isvariable("override_data_$(override_vars)");

      "$(const.t) defined class role/byname $(extra_roles[byname][$(roles_byname_keys)]) because of classmatch('$(roles_byname_keys)')"
        ifvarclass => "$(extra_roles[byname][$(roles_byname_keys)])";

      "$(const.t) defined class role/byrole $(roles_byrole_keys) because of classmatch('$(extra_roles[byrole][$(roles_byrole_keys)])')"
        ifvarclass => "$(roles_byrole_keys)";

      "$(const.t) $(defvars) = $($(defvars))";
      "DEBUG $(this.bundle): Agent parsed augments_file"
        ifvarclass => "have_augments_file.feature_def_json_preparse";
      "DEBUG $(this.bundle): Policy parsed augments_file"
        ifvarclass => "have_augments_file.!feature_def_json_preparse";
}
